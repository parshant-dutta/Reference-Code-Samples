####### Computer vision #######



### remote-patient.component.ts

  initiateComputerVisionFuntion() {
    const config = {
      locateFile: (file: any) => {
        return `https://cdn.jsdelivr.net/npm/@mediapipe/holistic@` +
          `${VERSION}/${file}`;
      }
    };

    // Our input frames will come from here.
    const canvasElement: any = this.canvas.nativeElement
    const controlsElement = document.getElementsByClassName('control-panel')[0] as HTMLElement;
    const canvasCtx = this.ctxCanvas
    let fpsControl: FPSControl = new FPS();

    function removeElements(
      Landmarks: any, elements: any) {
      for (const element of elements) {
        delete Landmarks[element];
      }
    }

    function removeLandmarks(results: any) {
      if (results?.poseLandmarks) {
        removeElements(
          results?.poseLandmarks
        }
    }

    function connect(
      ctx: any,
      connectors: any) {
      const canvas = ctx.canvas;
      for (const connector of connectors) {
        const from = connector[0];
        const to = connector[1];
        if (from && to) {
          if (from.visibility && to.visibility &&
            (from.visibility < 0.1 || to.visibility < 0.1)) {
            continue;
          }
          ctx.beginPath();
          ctx.moveTo(from.x * canvas.width, from.y * canvas.height);
          ctx.lineTo(to.x * canvas.width, to.y * canvas.height);
          ctx.stroke();
        }
      }
    }

    let activeEffect = 'mask';
    function onResults(results: Results) {
      // Hide the spinner.

      // Remove landmarks we don't want to draw.
      removeLandmarks(results);

      fpsControl.tick();          //commented

      // Draw the overlays.
      canvasCtx.save();
      canvasCtx.clearRect(0, 0, canvasElement.width, canvasElement.height);

      if (results?.segmentationMask) {
        canvasCtx.drawImage(
          results?.segmentationMask, 0, 0, canvasElement.width,
          canvasElement.height);

        // Only overwrite existing pixels.
        if (activeEffect === 'mask' || activeEffect === 'both') {
          canvasCtx.globalCompositeOperation = 'source-in';
          // This can be a color or a texture or whatever...
          canvasCtx.fillStyle = '#00FF007F';
          canvasCtx.fillRect(0, 0, canvasElement.width, canvasElement.height);
        } else {
          canvasCtx.globalCompositeOperation = 'source-out';
          canvasCtx.fillStyle = '#0000FF7F';
          canvasCtx.fillRect(0, 0, canvasElement.width, canvasElement.height);
        }

        // Only overwrite missing pixels.
        canvasCtx.globalCompositeOperation = 'destination-atop';
        canvasCtx.drawImage(
          results?.image, 0, 0, canvasElement.width, canvasElement.height);

        canvasCtx.globalCompositeOperation = 'source-over';
      } else {
        canvasCtx.drawImage(
          results?.image, 0, 0, canvasElement.width, canvasElement.height);
      }

      // Connect elbows to hands. Do this first so that the other graphics will draw
      // on top of these marks.
      canvasCtx.lineWidth = 5;
      if (results?.poseLandmarks) {
        if (results?.rightHandLandmarks) {
          canvasCtx.strokeStyle = 'white';
          connect(canvasCtx, [[
            results?.poseLandmarks[POSE_LANDMARKS.RIGHT_ELBOW],
            results?.rightHandLandmarks[0]
          ]]);
        }
        if (results?.leftHandLandmarks) {
          canvasCtx.strokeStyle = 'white';
          connect(canvasCtx, [[
            results?.poseLandmarks[POSE_LANDMARKS.LEFT_ELBOW],
            results?.leftHandLandmarks[0]
          ]]);
        }
      }

      // Pose...
      drawConnectors(
        canvasCtx, results?.poseLandmarks, POSE_CONNECTIONS,
        { color: 'white' });
      drawLandmarks(
        canvasCtx,
        Object.values(POSE_LANDMARKS_LEFT)
          .map((index?: any) => {
            if (results.poseLandmarks) {
              return results?.poseLandmarks[index];
            }
            else return results?.poseLandmarks
          }),
        { visibilityMin: 0.65, color: 'white', fillColor: 'rgb(255,138,0)' });
      drawLandmarks(
        canvasCtx,
        Object.values(POSE_LANDMARKS_RIGHT)
          .map((index?: any) => {
            if (results.poseLandmarks) {
              return results?.poseLandmarks[index];
            }
            else return results?.poseLandmarks
          }),
        { visibilityMin: 0.65, color: 'white', fillColor: 'rgb(0,217,231)' });

      // Hands...
      drawConnectors(
        canvasCtx, results?.rightHandLandmarks, HAND_CONNECTIONS,
        { color: 'white' });
      drawLandmarks(canvasCtx, results?.rightHandLandmarks, {
        color: 'white',
        fillColor: 'rgb(0,217,231)',
        lineWidth: 2,
        radius: (data: any) => {
          return lerp(data.from.z, -0.15, .1, 10, 1);
        }
      });
      drawConnectors(
        canvasCtx, results?.leftHandLandmarks, HAND_CONNECTIONS,
        { color: 'white' });
      drawLandmarks(canvasCtx, results?.leftHandLandmarks, {
        color: 'white',
        fillColor: 'rgb(255,138,0)',
        lineWidth: 2,
        radius: (data: any) => {
          return lerp(data.from.z, -0.15, .1, 10, 1);
        }
      });

      // Face...
      drawConnectors(
        canvasCtx, results?.faceLandmarks, FACEMESH_TESSELATION,
        { color: '#C0C0C070', lineWidth: 1 });
      drawConnectors(
        canvasCtx, results?.faceLandmarks, FACEMESH_RIGHT_EYE,
        { color: 'rgb(0,217,231)' });
      drawConnectors(
        canvasCtx, results?.faceLandmarks, FACEMESH_RIGHT_EYEBROW,
        { color: 'rgb(0,217,231)' });
      drawConnectors(
        canvasCtx, results?.faceLandmarks, FACEMESH_LEFT_EYE,
        { color: 'rgb(255,138,0)' });
      drawConnectors(
        canvasCtx, results?.faceLandmarks, FACEMESH_LEFT_EYEBROW,
        { color: 'rgb(255,138,0)' });
      drawConnectors(
        canvasCtx, results?.faceLandmarks, FACEMESH_FACE_OVAL,
        { color: '#E0E0E0', lineWidth: 5 });
      drawConnectors(
        canvasCtx, results?.faceLandmarks, FACEMESH_LIPS,
        { color: '#E0E0E0', lineWidth: 5 });

      canvasCtx.restore();
    }
    this.holistic = new Holistic(config);
    this.holistic.onResults((results: any) => {
      onResults(results);
      this.cpCoordinates = results;
    });

    // Present a control panel through which the user can manipulate the solution
    // options.

    new ControlPanel(controlsElement, {
      selfieMode: false,
      modelComplexity: 1,
      smoothLandmarks: true,
      enableSegmentation: false,
      smoothSegmentation: true,
      minDetectionConfidence: 0.1,
      minTrackingConfidence: 0.5,
    })
      .add([
        new StaticText({ title: 'MediaPipe Holistic' }),
        fpsControl
      .on((x: any) => {
        const options = x;
        this.remoteVideo.classList.toggle('selfie', options.selfieMode);
        activeEffect = (x)['effect'];
        this.holistic.setOptions(options);
      });
  }