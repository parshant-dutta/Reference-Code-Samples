// Dashboard Grid view HTML file

<div class="inputdiv" *ngIf="addWidgetMode">
    <div class="report-name">{{languageObject?.common.name}}</div>
    <input-form [placeholderText]='languageObject?.reports.widgetName' [requiredError]='languageObject?.reports.errorMessage.widgetNameRequired' [maxLengthError]='languageObject?.reports.errorMessage.maxWidgetName' (onSubmitted)='addNewWidget($event)' (onCancel)='addWidgetMode = false'></input-form>
</div>

<div class="gridsterWraper">
    <gridster #gridster [options]="options" class="widgetChartWrap" *ngIf="dashboardData && globalSpan">
        <gridster-item  class="widget" [item]="widget.position" [ngClass]="chartType === 'Energy Savings' ? 'energy-saving-widget' : ''" *ngFor="let widget of allWidgets;let i = index;trackBy: trackByFn">
            <mat-icon (mousedown)="isDragStart = true" (click)="isDragStart = false" *ngIf="!isSlideShow"  [matTooltip]="isDragStart?'':authService?.languageObject?.common.drag" class="drag-handler">drag_indicator</mat-icon>
            <div class="grid-widget-container" (mousedown)="$event.stopPropagation()" (touchstart)="$event.stopPropagation()" >
                <app-custom-grid-widget [widget]="widget" [dataPoints]="dataPoints" [index]="i" [disableButtons]="disableEditDeleteButton" [globalSpan]="globalSpan" [hideActionButtons]="hideActionButtons" [isSystemDashboard]="isSystemDashboard" [dashboardLevel]="dashboardLevel"
                [siteHierarchyLevels]="siteHierarchyLevels" [dashboardData]="dashboardData" (editClicked)="editWidgetClick($event)" (deleteClickedEvent)="deleteWidget($event)" (renderSuccess)="closeModal()" (updateExistingWidget)="updateAutoWidgetsData($event)"
                (updateWidgetDataOnNodeChange)="updateWidgetDataonNodeChanged($event)" [registeredDataPointsTypes]="registeredDataPointsTypes" (exportClicked)="downloadCSV($event)" [isSlideShow]="isSlideShow"></app-custom-grid-widget>
            </div>
            </gridster-item>
    </gridster>
    <!-- // In case of no widget  -->
    <div class="WidgetAvailable" *ngIf="!dashboardData?.widgets?.length">
        <div class="emptyWidgetWrapper">
            <span>{{authService?.languageObject?.dashboard.NoWidgetAvailable}}</span>
        </div>
    </div>
</div>

// Dashboard Grid view .ts file

initialization() {
this.loaderService.hideSpinner(); //after response
    this.customDashboardService.colorMappingWithDatapointIds = {};
    this.customDashboardService.widgetDestroyed$ = new Subject<void>();
    this.addPositionInWidgets()
    this.options = {
      gridType: GridType.Fit,
      compactType: CompactType.None,
      pushItems: false,
      displayGrid: 'onDrag&Resize',
      pushDirections: { north: true, east: true, south: true, west: true },
      pushResizeItems: true,
      swap: true,
      swapWhileDragging: true,
      minCols: 3,
      maxCols: 6,
      minRows: 2,
      maxRows: 6,
      draggable: {
        enabled: this.isSlideShow ? false : true,
        ignoreContentClass: 'preventWidgetReposition'
      },
      resizable: {
        enabled: this.isSlideShow ? false : true,
        handles: {
          s: true,
          e: true,
          n: true,
          w: true,
          se: true,
          ne: true,
          sw: true,
          nw: true
        },
      },
      initCallback: this.initItem.bind(this),
      itemResizeCallback: this.itemResize.bind(this),
      itemChangeCallback: (item, component) => {
        try {
          let x: any = document.getElementsByClassName('widget-content');
          for (let i = 0; i < component.gridster.grid.length; i++) {
            x[i].style.height = component.gridster.grid[i].height - 46.79;
          }
        } catch (error) {

        }
        let allWidgetData = _.cloneDeep(this.allWidgets);
        const index = allWidgetData.findIndex(w => w._id == item.id);
        if (index > -1 && !this.isSlideShow) {
          this.updatePositionInAllWidgetData(item, index);
          this.updateWidget(item);
        }
      }
    };

}

// Add positions into every dashboard widgets
  addPositionInWidgets() {
    let allWidgetsData = _.cloneDeep(this.dashboardData.widgets);
    this.allWidgets = allWidgetsData.map(widget => {
      return {
        ...widget, position: {
          id: widget._id,
          cols: widget.widgetCol,
          rows: widget.widgetRow,
          y: widget.widgetY,
          x: widget.widgetX
        }
      }
    })
    this.customDashboardService.allWidgetData = this.allWidgets;
  }
  
  
  // Code for update widget while position changed by user
  
    updateWidget(widgetCoordinates: any) {
    const payload = {
      id: widgetCoordinates.id,
      widgetX: widgetCoordinates.x,
      widgetY: widgetCoordinates.y,
      widgetCol: widgetCoordinates.cols | widgetCoordinates.widgetCol,
      widgetRow: widgetCoordinates.rows | widgetCoordinates.widgetRow
    };
    this.store.dispatch(new UpdateExistingWidget(payload, false));
  }